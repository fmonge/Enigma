; --->> macros de escritura y lectura  <<---

%define sys_read 0
%define sys_write 1 
%define std_in 1
%define std_out 1
%define	std_err 2
%define sys_exit 60


; std_out & std_in

	
%macro print 2  ; mensaje , lenMensaje
        push rax
	push rdi
        push rsi
        push rdx

        mov rax, sys_write
        mov rdi, std_out
        mov rsi, %1
        mov rdx, %2
        syscall

        pop rdx
        pop rsi
        pop rdi
        pop rax
%endmacro

%macro leer 2   ;in = buffer, len out =  len lecura en r8,
;        push rax
        push rdi
        push rsi
        push rdx

        mov rax, sys_read
        mov rdi, std_in
        mov rsi, %1
        mov rdx, %2
        syscall
        ; len de lectura =  rax 
        pop rdx
        pop rsi
        pop rdi
;        pop rax
%endmacro

%macro movBuf 2 ; copia un buffer de tamaño rcx a otro de igual tamaño
	push rcx
        lea rdi, [%1]
        lea rsi, [%2]
        rep movsb
        pop rcx
      ;  ret
%endmacro


%macro exit 0

        xor rsi, rsi
        mov rax, sys_write
        mov rdi, std_out
        mov rsi, 0x0A
        mov rdx, 1
	syscall
        mov rax, sys_exit
        mov rdi, 0              ; return 0, success
        syscall

%endmacro



%macro rotarBuf 2 ; buffer (deTamaño 26) , cantidad de rotaciones
        push rcx 
        push r8
        push rdi 
        push rsi 
	xor rcx, rcx
	mov rcx, 26
        mov r8, %2 
	;dec r8
        movBuf bufTmp, %1
        sub rcx, %2
	
        lea rsi, [bufTmp + %2]  
        lea rdi, [%1]
        rep movsb
      ;  lea rdi, [%1]
	lea rsi, [bufTmp]
        xor rcx, rcx 
        mov rcx, %2
	
        rep movsb
    

        pop rsi 
        pop rdi 
        pop r8
        pop rcx 
%endmacro

